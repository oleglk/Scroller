Score-maker usage instructions

==== Score page scans preparation ==============================================
1.1) Scan the score pages as goos as possible.

1.2) Crop tightky on the sides.

1.3) Resize all page images to the same width
(recommended pixel-width:- ~80% of intended screen horizontal resolution)
 * set IMCONVERT {C:\Program Files\Imagemagick_711_3\convert.exe}
 * #### exec $IMCONVERT --version; check the path before script
 * file mkdir RESIZED
 * foreach f [glob {CROPPED/*.jpg}]  {$IMCONVERT $f -resize 800x -quality 92 [file join "RESIZED" [file tail $f]]}
 ****
 * !Having page-width close to screen resolution makes fading alerts visible!*/  

1.4) Mark all score-line top-s and last score-line bottom with the same color.
- use "Paint" application or alike; save results as .gif (or ppm, ?png?)
- place a small quadrant (5*5) of the chosen marker color in the top-left corner
- place the marks "tightly" close to the related score lines - as close as possible; just enough to include finger numbers (don't leave spare space beyound the upper/lower pixels of the most distant finger numbers in this line) 
- the rest of this document assumes the resulting images are saved under "MARKED\" subdirectory as GIF files


==== Auto-generating score templates ===========================================
2.1) Put all page scans (with line markings) for the score into one directory and start Tcl/Tk graphical shell (usually "wish") in its parent directory.
  >>>>> Example (Windows cmd):
  C:\Oleg\GitWork\Scroller\Scores\V02>md Scores
  C:\Oleg\GitWork\Scroller\Scores\V02>copy MARKED\Vals_by_Petrov__*.gif Scores\
  MARKED\Vals_by_Petrov__01.gif
  MARKED\Vals_by_Petrov__02.gif
  MARKED\Vals_by_Petrov__03.gif
          3 file(s) copied.

  C:\Oleg\GitWork\Scroller\Scores\V02>start C:\Oleg\Tools\TCL\freewrap_wish.exe
  C:\Oleg\GitWork\Scroller\Scores\V02>

2.2) (In Tcl shell) Load score-maker code
source C:/Oleg/GitWork/Scroller/Code/make_score.tcl

2.3) (In Tcl shell) Invoke the score-maker
make_score_file  "Vals_by_Petrov"  [list "Scores/Vals_by_Petrov__01.gif" "Scores/Vals_by_Petrov__02.gif" "Scores/Vals_by_Petrov__03.gif"]

>>>>>> Sample screen output:
  (V02) 3 % make_score_file  "Vals_by_Petrov"  [list "Scores/Vals_by_Petrov__01.gif" "Scores/Vals_by_Petrov__02.gif" "Scores/Vals_by_Petrov__03.gif"]
  Log file for score 'Vals_by_Petrov' goes into 'Scores/Vals_by_Petrov__score_maker_log.txt'
  Begin processing score page 'pg01', path: 'Scores/Vals_by_Petrov__01.gif'

  ... Please wait ...
  End processing score page 'pg01', path: 'Scores/Vals_by_Petrov__01.gif', width=2000, height=1292
  Begin processing score page 'pg02', path: 'Scores/Vals_by_Petrov__02.gif'

  ... Please wait ...
  End processing score page 'pg02', path: 'Scores/Vals_by_Petrov__02.gif', width=2000, height=1286
  Begin processing score page 'pg03', path: 'Scores/Vals_by_Petrov__03.gif'

  ... Please wait ...
  End processing score page 'pg03', path: 'Scores/Vals_by_Petrov__03.gif', width=2000, height=1293
  Done generting description file for score 'Vals_by_Petrov' into 'Scores/Vals_by_Petrov__straight_out.html'...
0
====
Several facts to be learned from the above:
- the detailed log file for score 'Vals_by_Petrov' could be found  in  'Scores/Vals_by_Petrov__score_maker_log.txt';
- the score has 3 original pages; all processed succesfully
- the resulting description file template is: 'Scores/Vals_by_Petrov__straight_out.html'.


==== Verify validity of the autogenerated score ====
3.1) Provide Scroller code files alongside the autogenerated score
  >>>>> Example (Windows cmd):
  C:\Oleg\GitWork\Scroller\Scores\V02>md .\Code
  C:\Oleg\GitWork\Scroller\Scores\V02>copy ..\..\Code\*.* .\Code\
..\..\Code\assemble.tcl
..\..\Code\img_scroll.js
..\..\Code\make_score.tcl
..\..\Code\ModalDialog.js
..\..\Code\PlayOrder.js
..\..\Code\run__make_score.tcl
..\..\Code\ScoreImgLayout.js
..\..\Code\ScrollerCommonUtils.js
        8 file(s) copied.

3.2) Try to open the autogenerated score in a browser:
- Open a new tab in the browser
- In this Tab open the browser console (In Firefox - press Ctrl-Shift-i), resize it to approximately 1/4 of the window height
- (important) Return input focus to the non-console field in the browser tab - click on it with the mouse left button
- In FireFox, Edge, etc, press Ctrl-O, navigate to the relevant directory and choose the autogenerated score (in our example C:\Oleg\GitWork\Scroller\Scores\V02\Scores\Vals_by_Petrov__straight_out.html)
- You should see the chosen score in the background and the tempo prompt for it in the foreground
- Examine the console for errors; ignore "Invalid URI. Load of media resource failed" messages
---- assuming no errors detected ----
- Enter the tempo of, say, 60 beats/sec; with the default line duration of 3 beats imprinted in autogenerated score, each line is expected to "stay" for 3 seconds.
- Start scrolling (right click); watch the scrolling of one line at a time every 3 seconds. Again, the default number of lines to jump in one step - one line - is imprinted in autogenerated score.
-- Do verify all the lines are "played" in the straight order from the first to the last.
-- Do verify all the lines are correctly positioned.
-- Pay attention at the progress indicator (countdown) that appears near the currently "played" line; while it isn't (by design) aligned with the current line center, its vertical position should unambiguously tell which line is the current.

==== If (3) worked correctly, assume autogeneration was successful. ====
==== From now on the line-location marking in the score isn't needed any more ===


==== Return to unmark score images ====
4.1) Copy the relevant unmarked score-page images into the directory of autogenerated score file
  >>>>> Example (Windows cmd):
  C:\Oleg\GitWork\Scroller\Scores\V02>copy RESIZED\Vals_by_Petrov__*.jpg Scores\
  RESIZED\Vals_by_Petrov__01.jpg
  RESIZED\Vals_by_Petrov__02.jpg
  RESIZED\Vals_by_Petrov__03.jpg
        3 file(s) copied.

4.2) Change score-page images' extensions in the autogenerated score file from .gif to .jpg
- open the autogenerated score file in a text editor
- find the file-paths' array - search for "g_pageImgPathsMap":
  >>>>> Example of file-paths' array - as generated:
  var g_pageImgPathsMap = new Map([
  ["pg01", "Vals_by_Petrov__01.gif"],
  ["pg02", "Vals_by_Petrov__02.gif"],
  ["pg03", "Vals_by_Petrov__03.gif"],
  ]);
- replace the image-file extensions
  >>>>> Example of file-paths' array - after extension replacement:
  var g_pageImgPathsMap = new Map([
  ["pg01", "Vals_by_Petrov__01.jpg"],
  ["pg02", "Vals_by_Petrov__02.jpg"],
  ["pg03", "Vals_by_Petrov__03.jpg"],
  ]);
- it's recommended to save the modified score file under a different name, say, "Vals_by_Petrov__g.html"

4.3) Verify that the Scroller works correctly after extension change - perform the procedures from (3.2).


==== Ensure the score images are comfortably visible with all the details ====
!!! This stage is better performed with the display used while playing the piano; viewed from the real-world distance - e.g. by the user sitting near the piano keyboard !!!

(5.1) Restart the Scroller in manual-step mode and carefully examine score-images' content.

==== If everything looks fine, the score template is ready ====

(5.2) A trick to address pale color or low contrast in some of the score features:
turn gray into black.
- This essentially converts the images into straight black-and-white which inherently increases the contrast
- The conversion could be done by so-called threshold transformation - where pixels brighter than the specified threshold become white, while all the other become black
- Threshold transformation in Imagemagick is specified by "-black-threshold <AMOUNT>%" flag
 * >>>>> Example of converting to black-and-white using Imagemagick in Tcl shell:
 * set IMCONVERT {C:\Program Files\Imagemagick_711_3\convert.exe}
 * file mkdir ENHANCED
 * foreach f [glob {RESIZED/*.jpg}]  {$IMCONVERT $f  -black-threshold 80%  -quality 92 [file join "ENHANCED" [file tail $f]]}

(5.3) A trick to address score-image features being too small: horizontal stretch
- With typical widescreen displays we cannot increase page height - vertical space is limited
- We can stretch the score horizontally. Up to 1.5x proven to be acceptable.
- In Imagemagick resizing could be specified in percentage to the original, separately for width and length - by "-resize <WIDTH>%x<HEIGHT>%" flag; value of 100% tells to leave the corresponding dimension unchanged.
- In the example below, the first "-resize" flag increases width-to-height ratio,, while the second one - forces a fixed width while preserving the ratio achieved by the first flag.
 * >>>>> Example of widening (horizontal stretch) using Imagemagick in Tcl shell:
 * set IMCONVERT {C:\Program Files\Imagemagick_711_3\convert.exe}
 * file mkdir ENHANCED
 * foreach f [glob {RESIZED/*.jpg}]  {$IMCONVERT $f  -resize 150%x100%  -resize 1050x -quality 92 [file join "ENHANCED" [file tail $f]]}

(5.4) If decided to apply both conversion to black-and-white and widening, specify the two grop of flags in one command.

(5.5) Copy the enhanced score-page images into the directory of autogenerated score file
  >>>>> Example (Windows cmd):
  C:\Oleg\GitWork\Scroller\Scores\V02>copy ENHANCED\Vals_by_Petrov__*.jpg Scores\
  ENHANCED\Vals_by_Petrov__01.jpg
  ENHANCED\Vals_by_Petrov__02.jpg
  ENHANCED\Vals_by_Petrov__03.jpg
        3 file(s) copied.

(5.6) Load the Scroller with the (modified copy of) autogenerated score in a browser window to verify that everything works - go over the full score either in manual or auto mode.

==== If everything looks fine, the score template is ready ====


==== At this point the automation did its work; now some manual tuning is required ====



==== Define score lines' playing order and timing =====

(6.1) Open the (modified copy of) autogenerated score file in a text editor.

(6.2) Find (in the modified copy of autogenerated score file) code-lines defining playing order and timing. These contain declaration of a Javascript array "g_linePlayOrder_straight".
- Perform textual search of "g_linePlayOrder_straight" in the autogenerated score file.
- Note that this array is just an _example_ of how to define play order and timing.
- You will create a similar array that matches your own desired score-line play order.
- Do keep in mind that Musical Score Scroller doesn't _play_ the score; it just shows score-lines to be played in the correct order for the specified time.
- Meaning of one code-line of "g_linePlayOrder_straight":
-- {pageId:"pg02", lineIdx:3, timeBeat:3} tells to _show_ line number 3 (counted from 0, thus the fourth) on page named "pg02" for a duration of 3 "beats"
-- you can learn which score page corresponds to "pg02" from Javascript collection "g_pageImgPathsMap" placed right above the "g_linePlayOrder_straight" array:
--- ["pg02", "Vals_by_Petrov__02.jpg"] tells that page name "pg02" refers to score-page image in the file named "Vals_by_Petrov__02.jpg"
-- "beats" used to represent score-line show duration independently of the tempo
--- one measure in time signature of 2/4 lasts 2 beats
--- two measures in time signature of 3/4 last 6 beats


(6.3) Replicate (copy-paste) the declaration (of "g_linePlayOrder_straight") and change array name of the copy. For example to "g_linePlayOrder_full".

(6.4) Edit the "g_linePlayOrder_full" array to reflect the desired score-line play order and timing.
- Example of time setting - the first two lines of "Vals_by_Petrov__01.jpg"
-- The 1st line - index 0 - lineIdx:0 - has 6 measures of 3/4
-- The first time the 1st line is played, all 6 measures are performed, thus the duration is 6*3 = 18 beats.
-- When the 1st line is repeated, only 2 measures are played, thus the duration is 2*3 = 6 beats.
-- The 2nd line - index 1 - lineIdx:1 - also has 6 measures of 3/4, and is always performed in its entirety, thus the duration is 6*3 = 18 beats in all its occurences.
- See the ultimate example of specifying score lines' playing order and timing - "g_linePlayOrder_full" array - in the supplied score-file "Scroller\Scores\Vals_by_Petrov__full.html"

(6.5) TODO: point at the right line play order array - see TODO

(6.6) Load the Scroller with the (modified copy of) autogenerated score in a browser window to verify that everything works - go over the full score in auto mode.
- Verification in auto mode required to check timing.
- You may run the Scroller while specifying abnormally high tempo - like 320 beats/minute,


TODO




==== Copy all the files for the resulting score into the ultimate directory for the scores.
- "All files for the resulting score" are: autogenerated HTML score file
TODO
